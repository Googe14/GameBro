package hardware;

public class Memory {

	public static final int INTERRUPT 	= 0xFFFF;
	public static final int INTERL 		= 0xFF80;
	public static final int HWIO		= 0xFF00;
	public static final int OAM			= 0xFE00; //Object Attribute Memory (Basically VRAM for sprites)
	public static final int EchoRAM		= 0xE000; //Reserved, do not use
	public static final int RAM			= 0xC000; //Internal Ram, Banks 1-7
	public static final int CartRAM		= 0xA000; //(If Available)
	public static final int VRAM		= 0x8000;
	public static final int CartROM		= 0x4000;
	public static final int ROMBank0	= 0x0000;
	
	
	public int[] memory = new int[0x10000];
	
	public Memory() {
		for(int i = 0; i< 0x10000; i++) { //Set memory to zeros
			memory[i] = 0x00;
		}
	}
	
	//***********************Read/Write functions
	
	public int read16(int address) { //Read 16 bits from the given address
		int out = 0;
		out = (memory[address+1] & 0xFF) << 8;
		out = out | (memory[address] & 0xFF);
		return out;
	}
	
	public int read8(int address) { //Read 8 bits from memory
		return memory[address];
	}
	
	public void write8(int address, int data) {
		memory[address] = data;
	}
	
	public void write16(int address, int data) {
		memory[address+1] = (data >> 8) & 0xFF;
		memory[address] = (data) & 0xFF;
	}
	
	public void writeBytes(int[] bytes, int address) {
		for(int i = 0; i < bytes.length; i++) {
			write8(address+i, bytes[i] & 0xFF);
		}
	}
	
	//*************************
	
	
	
	//***********************BIOS
	private boolean finishedBIOS = false;
	
	public void loadBIOS() {
		for(int i = 0; i < BIOS.length; i++) {
			write8(i, (byte)BIOS[i]);
		}
		finishedBIOS = false;
	}
	
	public static final int[] BIOS = {
			0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
			0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
			0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
			0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
			0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
			0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
			0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
			0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
			0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
			0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
			0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
			0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
			0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
			0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x4C,
			0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
			0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50 };
	
	
}
